# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

version: '2'
services:
  lando-api:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile-dev
    ports:
      - "8888:80"
    environment:
      - PORT=80
      - VERSION_PATH=/version.json
      - PHABRICATOR_URL=https://phabricator-dev.allizom.org/
      # To set the API key, login as a user on phabricator-dev,
      # create a new Conduit API token and add it here.
      - PHABRICATOR_UNPRIVILEGED_API_KEY=api-0123456789012345678901234567
      - DATABASE_URL=postgresql://postgres:password@lando-api.db/lando_api_dev
      - ENV=localdev
      - SENTRY_DSN=
      - PINGBACK_ENABLED=y
      - PINGBACK_HOST_URL=https://lando-api.test
      - TRANSPLANT_URL=https://fake-transplant.herokuapp.com/
      - TRANSPLANT_USERNAME=autoland
      - TRANSPLANT_PASSWORD=autoland
      - TRANSPLANT_API_KEY=set-api-key
      - PATCH_BUCKET_NAME=
      - OIDC_IDENTIFIER=
      - OIDC_DOMAIN=
      # - CSP_REPORTING_URL=/__cspreport__
      - CACHE_REDIS_HOST=redis.cache
#      - CACHE_REDIS_PORT=
#      - CACHE_REDIS_PASSWORD=
#      - CACHE_REDIS_DB=
      # Leave AWS credentials unconfigured in production
      - AWS_ACCESS_KEY=
      - AWS_SECRET_KEY=
      # ------------------------------------------------------------------------
      # Local Development Flags, edit in docker-compose.override.yml
      # https://docs.docker.com/compose/extends/#example-use-case
      # ------------------------------------------------------------------------
      # LOCALDEV_MOCK_AUTH0_USER: Set to 'default' to use a default user with
      # valid landing permissions in when an auth0 user is required in local
      # dev. You must still pass a Bearer token header, it can be invalid.
      # Set to 'inject_valid' to load users from the provided token and inject
      # LDAP claims for valid landing permission. Set to 'inject_invalid' to
      # inject invalid permissions.
      - LOCALDEV_MOCK_AUTH0_USER=
      # LOCALDEV_MOCK_TRANSPLANT_SUBMIT: Set to 'succeed' to mock the request to
      # the transplant service which enqueues a landing. This mock will always*
      # successfully enqueue the landing request and return the request id
      # immediately. This does NOT mock notifying lando-api when the landing
      # status changes asynchronously. The status of the landing will remain
      # as submitted only. You may manually use the Swagger UI to update it.
      # Set to 'fail' to mock immediate request failure.
      # * A random number is chosen between 0 and 10,000,000, will crash if
      # you get the same number twice due to db uniqueness constraint.
      - LOCALDEV_MOCK_TRANSPLANT_SUBMIT=

    volumes:
      - ./:/app
      - ./migrations/:/migrations/
    depends_on:
      - lando-api.db
      - redis.cache
  py3-linter:
    build:
      context: ./
      dockerfile: ./docker/py3-linter-dockerfile
    volumes:
      - ./:/code/
  lando-api.db:
    image: postgres:alpine
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
    volumes:
      - postgres_db:/var/lib/postgresql/data
      - ./docker/postgres-init-scripts/:/docker-entrypoint-initdb.d/
    ports:
      - "54321:5432"
  redis.cache:
    image: redis:3.2-alpine # Elasticache version.
volumes:
  postgres_db:
